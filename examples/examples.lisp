(in-package #:cl-matrix)

(let ((single1 (make-square :matrix '((1.0 2.0 3.0)
                                      (4.0 5.0 6.0)
                                      (7.0 8.0 10.0))))
      (single2 (make-square :matrix '((4.0 3.0 2.0)
                                      (4.0 2.3 1.12)
                                      (1.0 5.2 6.321))))
      (double1 (make-square :matrix '((1d0 2d0 3d0)
                                      (4d0 5d0 6d0)
                                      (7d0 8d0 10d0))
                            :element-type :double))
      (double2 (make-square :matrix '((4d0 3d0 2d0)
                                      (4d0 2.3d0 1.12d0)
                                      (1d0 5.2d0 6.321d0))
                            :element-type :double))
      (cucomplex1 (make-square :matrix '((#c(1 2) #c(1.0 2.3) #c(4 3))
                                         (#c(3.2 2.1) #c(1.1 6.45) #c(6 7))
                                         (#c(1 2) #c(4 5.5) #c(3 1)))
                               :element-type :cucomplex))
      (cucomplex2 (make-square :matrix '((#c(2 1) #c(1.4 12.2) #c(32.1 32))
                                         (#c(3.3 2.5) #c(1.2 6.4) #c(4 3))
                                         (#c(2.3 2) #c(3 5.4) #c(2 5.1)))
                               :element-type :cucomplex))
      (cudoublecomplex1 (make-square :matrix '((#c(1 2) #c(1.0 2.3) #c(4 3))
                                               (#c(3.2 2.1) #c(1.1 6.45) #c(6 7))
                                               (#c(1 2) #c(4 5.5) #c(3 1)))
                                     :element-type :cudoublecomplex))
      (cudoublecomplex2 (make-square :matrix '((#c(2 1) #c(1.4 12.2) #c(32.1 32))
                                               (#c(3.3 2.5) #c(1.2 6.4) #c(4 3))
                                               (#c(2.3 2) #c(3 5.4) #c(2 5.1)))
                                     :element-type :cudoublecomplex)))
  (defun test-arithmetic ()
    (print (matrix-* (matrix-+ single1 single2) single2))
    (print (matrix-* (matrix-+ double1 double2) double2))
    (print (matrix-* (matrix-+ cucomplex1 cucomplex2) cucomplex2))
    (matrix-* (matrix-+ cudoublecomplex1 cudoublecomplex2) cudoublecomplex2)
    (print (concat cudoublecomplex1 cudoublecomplex2)))

  (defun test-single-operation ()
    (loop for matrix in (list single1 double1 cucomplex1 cudoublecomplex1) do
         (print (multiple-value-list (lu matrix)))
         (print (multiple-value-list (qr matrix)))
         (print (matrix-transpose matrix))
         (print (multiple-value-list (svd-jacobi matrix)))
         (print (multiple-value-list (eigenvalue matrix)))
         (print (matrix-trace matrix))
         (print (multiple-value-list(cholesky matrix)))
         (print (multiple-value-list (matrix-reverse matrix)))
         (print (det matrix)))))
